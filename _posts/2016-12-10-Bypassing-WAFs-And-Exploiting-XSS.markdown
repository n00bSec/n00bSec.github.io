---
layout: post
title: "Bypassing a WAF And Exploiting a XSS Vulnerability"
date: 2016-12-10  11:00:00 -0400
categories: xss post update
---

<p>Finals have been happening, and so I've been studying way too often to do as much security research as I'd like, and yet still I (irresponsibly) went out of my way to find some XSS vulnerabilities to exploit for fun, resume boosting, and practice (I don't expect profit anytime soon). With some Google Dorking, it didn't take me longer than a few searches to find two targets with clear vulnerabilities that I could exploit and report. I'll show my way of moving through the second of the two, redacting information that could lead someone to them too easily, unless they get back to me sometime soon.</p>

<p> I've explained XSS (cross site scripting) to my friends a few times now, and taught one how to do it with Damn Vulnerable Web App running in VirtualBox, but for other people new to web security, a cross site scripting attack occurs when an attacker's malicious code is injected into a web page to be executed in the browsers of other visitors. This is often done through either finding a way to store your code on the site's database so that it's returned later, or by manipulating the unsafe use of GET or POST data sent to the site with a malicious link. The former is how Samy's Worm worked, and the latter method is how a lot of phishing attacks are set up. Once malicious code gets executed within a victim's browser, the victim may have their cookies stolen, their actions spied on, or in a crazier case, get <a href="https://www.chmag.in/articles/techgyan/javascript-botnets/">added to a botnet</a>.</p>

<p>I've no intention of running a botnet by XSS (I'm a broke law abiding citizen). ButI find this fun, and so I went in.</p>

<p>I arrived upon a page with an empty set of Search Results and a search bar in the top right corner of the screen. Trying this vector...</p>

	 search.php?s=<a

<img src="/pics/a-tag-jumbled.png">


<p>I can inspect the source within to see that the beginning of the starting <i>a</i> tag came through unfiltered, jumbling up the html around it. Replacing that tag with a <i>script</i> tag however results in the server blocking my request and giving me a 403.</p>

<img src="/pics/403-Forbidden-Page.png">

<p> What I just encountered is a WAF, the mystical Web Application Firewall that protects dangerous keywords from touching precious web apps. It saw my dangerous Javascript tag and immediately blocked my request as a result. I took note then that I'd have to watch out for the use of any keywords that might set it off. "<script" isn't allowed, but the word "script" alone is.</p>

<img src="/pics/search-result-A.png">

<p>Since link tags are allowed, and script tags aren't, then I figured that other tags might be allowed just fine. And so I tried an image tag, with a src to a picture I pulled up on Google.</p>

		 search.php?s=<img src%3D"http://i0.wp.com/blogs.techsmith.com/wp-content/uploads/2016/09/what-is-a-meme.jpg">

<img src="/pics/Meme-Injection.png">

<p>Clearly that's a success. And so we can at the very least fake html content. But with that much allowed, and no escaping the data, I knew there was probably a way to get Javascript through. The first way I thought of trying to do it was through the <i>onload</i> attribute for elements like divs, svgs, and images. We try it then, and we get...</p>

<img src="/pics/No-Result.png">

<p>...nothing?</p>

<img src="/pics/403-iframe.png">

<p>That figures. <i>onload</i> is watched for in the WAF protecting the page that generates the search results, and thus we get a 403 in the iframe. I was ready to say "Damn, they've got me," until I did a little Googling on some potential bypasses and sneaky XSS methods from the likes of <a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet">OWASP</a> and <a href="http://brutelogic.com.br/blog/">BruteLogic</a>. That's when I remembered that there lied another means, the <i>onerror</i> attribute. So with a small change</p>

		search.php?s=<img onerror%3D"" src%3D"http://i0.wp.com/blogs.techsmith.com/wp-content/uploads/2016/09/what-is-a-meme.jpg">

<p>This is something the WAF doesn't pick up on! We can use this attribute then to feed in our Javascript, and try something that doesn't use the <i>alert</i> keyword. <i>console.log(1)</i> seemed to work just fine.</p>

<img src="/pics/console-log.png">

<p>But I wanted an alert box; something to make it real clear that this was an XSS vulnerability the moment the page loads for when I report it (which I eventually did). And this is where I figured I could try to get a little creative. The last URL-based XSS attack I had seen used in phishes obfuscated itself with a massive number of calls to <i>eval()</i> and the like, and so I knew I could url-encode my entire string, <i>unescape()</i> it, and then call eval. There was another barrier in place that stopped me from using capital letters in my payload, but when I snuck my payload's strings past the WAFs through URL-encoding, I could gather any name I liked in the browser, and thus call any function I liked, giving me the last hurrah against this great puzzle.</p>

	   search.php?s=<img src%3D"x" onerror%3D" eval( unescape( '%2561%256C%2565%2572%2574'))('OPENBUGBOUNTY - XSS')">

<img src="/pics/XSS-success.png">

<p>I cheered and then left with some friends to eat dinner.</p>

<p>The spaces I had added into my payload because the WAF seemed to be more passive that way while I was spending some time pushing strings through it.</p>

<p>This exploit took me a few hours to figure out in between playing a game with a friend and studying, because of the need to bypass the WAF. Considering that people like Brute exist, having a WAF won't always be enough when it's clear you have a vulnerable page, and should really only be an extra layer on top of other better security measures. I'd suggest any new web developer to try their best in escaping all variable output that comes out of their website. In my own work history, I've used <a href="http://docs.php.net/htmlspecialchars">htmlspecialchars()</a> and <a href="http://php.net/manual/en/function.addslashes.php">addslashes()</a> in PHP pages like the one I'm exploiting here to mitigate this kind of issue to the degree a normal guy like at least me can't use the page to do harm.</p> 

<p>Hopefully the next time I blog it'll be about forensics in Android, <i>after I'm finished with finals</i>.</p>